{
  "openapi": "3.0.1",
  "info": {
    "title": "Library API",
    "description": "Access, update and create family members and their beloved pets ::))",
    "contact": {
      "name": "Duane Billue",
      "url": "https://www.linkedin.com/in/duanebillue/",
      "email": "duanebillue@yahoo.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1"
  },
  "paths": {
    "/api/birthstate": {
      "get": {
        "tags": [
          "BirthState"
        ],
        "summary": "Use this method to return all birth states.",
        "description": "HttpGet verb.",
        "operationId": "GetStates",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetBirthStateDTO"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/persons": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Use this method to add a new person.",
        "description": "HttpPost verb.",
        "operationId": "AddPerson",
        "requestBody": {
          "description": "The persons information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPersonDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddPersonDTO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AddPersonDTO"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Use this method to return all persons.",
        "description": "HttpGet verb.",
        "operationId": "GetPersons",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/persons/{personId}": {
      "patch": {
        "tags": [
          "Persons"
        ],
        "summary": "Use this method to update a person.",
        "description": "HttpPatch verb. \\\r\n            persons/personId \\\r\n            [ \\\r\n                { \\\r\n                    \"op\": \"replace\", \\\r\n                    \"path\": \"/firstname\", \\\r\n                    \"value\": \"Person's new first name.\" \\\r\n                } \\\r\n            ]",
        "operationId": "UpdatePerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "description": "The person's Guid Id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The persons information in JSON patch format.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Use this method to query for a person.",
        "description": "HttpGet verb.",
        "operationId": "GetPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "description": "The person's Id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "Use this method to delete a person.",
        "description": "HttpDelete verb.",
        "operationId": "DeletePerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "description": "The person's Id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/pets": {
      "get": {
        "tags": [
          "Pets"
        ],
        "operationId": "Index",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Pets"
        ],
        "summary": "Use this method to add a new pet.",
        "description": "HttpPost verb.",
        "operationId": "AddPet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetDTO"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/pets/{GetPets}": {
      "get": {
        "tags": [
          "Pets"
        ],
        "summary": "Use this method to query for a list of pets.",
        "description": "HttpGet verb.",
        "operationId": "GetPets",
        "parameters": [
          {
            "name": "GetPets",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string",
              "default": "GetPets"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PetDTO"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/pets/{GetPetTypes}": {
      "get": {
        "tags": [
          "Pets"
        ],
        "summary": "Use this method to query for a list of pet types.",
        "description": "HttpGet verb.",
        "operationId": "GetPetTypes",
        "parameters": [
          {
            "name": "GetPetTypes",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string",
              "default": "GetPetTypes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetPetTypesDTO"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/pets/{petId}": {
      "delete": {
        "tags": [
          "Pets"
        ],
        "summary": "Use this method to delete a pet.",
        "description": "HttpDelete verb.",
        "operationId": "DeletePet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetBirthStateDTO": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "stateId": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AddPersonDTO": {
        "type": "object",
        "description": "DTO model for adding a new person.",
        "additionalProperties": false,
        "required": [
          "age",
          "city",
          "country",
          "dateOfBirth",
          "firstName",
          "gender",
          "lastName",
          "mIddleName",
          "stateId"
        ],
        "properties": {
          "personId": {
            "type": "string",
            "description": "Database Id.",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "description": "Person's first name.",
            "maxLength": 50
          },
          "mIddleName": {
            "type": "string",
            "description": "Person's middle name.",
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "description": "Person's last name.",
            "maxLength": 50
          },
          "gender": {
            "type": "string",
            "description": "Person's gender.",
            "maxLength": 50
          },
          "age": {
            "type": "integer",
            "description": "Person's age.",
            "format": "int32"
          },
          "country": {
            "type": "string",
            "description": "Person's country.",
            "maxLength": 50
          },
          "city": {
            "type": "string",
            "description": "Person's city.",
            "maxLength": 50
          },
          "stateId": {
            "type": "integer",
            "description": "Person's state of birth.",
            "format": "int32"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Person's date of birth.",
            "format": "date-time"
          },
          "createDate": {
            "type": "string",
            "description": "Database entry created date.",
            "format": "date-time"
          }
        }
      },
      "OperationType": {
        "type": "integer",
        "format": "int32",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "Operation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "type": "object",
            "nullable": true,
            "additionalProperties": false
          },
          "operationType": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OperationType"
              }
            ]
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PetDTO": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "petId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "petTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "personId": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GetPetTypesDTO": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "petTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        }
      }
    }
  }
}