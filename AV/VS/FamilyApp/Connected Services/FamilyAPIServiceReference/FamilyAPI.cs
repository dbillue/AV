//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace FamilyApp.FamilyAPIServiceReference
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.2))")]
    public interface IController
    {
        /// <summary>Use this method to return all birth states.</summary>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetBirthStateDTO>> GetStatesAsync();
    
        /// <summary>Use this method to add a new person.</summary>
        /// <param name="body">The persons information.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<AddPersonDTO> AddPersonAsync(AddPersonDTO body);
    
        /// <summary>Use this method to return all persons.</summary>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task GetPersonsAsync(int? pageNumber, int? pageSize);
    
        /// <summary>Use this method to update a person.</summary>
        /// <param name="personId">The person's Guid Id</param>
        /// <param name="body">The persons information in JSON patch format.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task UpdatePersonAsync(System.Guid personId, System.Collections.Generic.IEnumerable<Operation> body);
    
        /// <summary>Use this method to query for a person.</summary>
        /// <param name="personId">The person's Id.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task GetPersonAsync(System.Guid personId);
    
        /// <summary>Use this method to delete a person.</summary>
        /// <param name="personId">The person's Id.</param>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task DeletePersonAsync(System.Guid personId);
    
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<string> IndexAsync();
    
        /// <summary>Use this method to add a new pet.</summary>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<PetDTO> AddPetAsync(PetDTO body);
    
        /// <summary>Use this method to query for a list of pets.</summary>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PetDTO>> GetPetsAsync(string getPets);
    
        /// <summary>Use this method to query for a list of pet types.</summary>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetPetTypesDTO>> GetPetTypesAsync(string getPetTypes);
    
        /// <summary>Use this method to delete a pet.</summary>
        /// <returns>Success</returns>
        System.Threading.Tasks.Task DeletePetAsync(System.Guid petId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;
    
        public Controller(IController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Use this method to return all birth states.</summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/birthstate")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetBirthStateDTO>> GetStates()
        {
            return _implementation.GetStatesAsync();
        }
    
        /// <summary>Use this method to add a new person.</summary>
        /// <param name="body">The persons information.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/persons")]
        public System.Threading.Tasks.Task<AddPersonDTO> AddPerson([Microsoft.AspNetCore.Mvc.FromBody] AddPersonDTO body)
        {
            return _implementation.AddPersonAsync(body);
        }
    
        /// <summary>Use this method to return all persons.</summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/persons")]
        public System.Threading.Tasks.Task GetPersons([Microsoft.AspNetCore.Mvc.FromQuery] int? pageNumber, [Microsoft.AspNetCore.Mvc.FromQuery] int? pageSize)
        {
            return _implementation.GetPersonsAsync(pageNumber, pageSize);
        }
    
        /// <summary>Use this method to update a person.</summary>
        /// <param name="personId">The person's Guid Id</param>
        /// <param name="body">The persons information in JSON patch format.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("api/persons/{personId}")]
        public System.Threading.Tasks.Task UpdatePerson(System.Guid personId, [Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<Operation> body)
        {
            return _implementation.UpdatePersonAsync(personId, body);
        }
    
        /// <summary>Use this method to query for a person.</summary>
        /// <param name="personId">The person's Id.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/persons/{personId}")]
        public System.Threading.Tasks.Task GetPerson(System.Guid personId)
        {
            return _implementation.GetPersonAsync(personId);
        }
    
        /// <summary>Use this method to delete a person.</summary>
        /// <param name="personId">The person's Id.</param>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("api/persons/{personId}")]
        public System.Threading.Tasks.Task DeletePerson(System.Guid personId)
        {
            return _implementation.DeletePersonAsync(personId);
        }
    
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/pets")]
        public System.Threading.Tasks.Task<string> Index()
        {
            return _implementation.IndexAsync();
        }
    
        /// <summary>Use this method to add a new pet.</summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/pets")]
        public System.Threading.Tasks.Task<PetDTO> AddPet([Microsoft.AspNetCore.Mvc.FromBody] PetDTO body)
        {
            return _implementation.AddPetAsync(body);
        }
    
        /// <summary>Use this method to query for a list of pets.</summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/pets/{GetPets}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PetDTO>> GetPets(string getPets)
        {
            return _implementation.GetPetsAsync(getPets);
        }
    
        /// <summary>Use this method to query for a list of pet types.</summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/pets/{GetPetTypes}")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetPetTypesDTO>> GetPetTypes(string getPetTypes)
        {
            return _implementation.GetPetTypesAsync(getPetTypes);
        }
    
        /// <summary>Use this method to delete a pet.</summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("api/pets/{petId}")]
        public System.Threading.Tasks.Task DeletePet(System.Guid petId)
        {
            return _implementation.DeletePetAsync(petId);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GetBirthStateDTO 
    {
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abbreviation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ProblemDetails 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>DTO model for adding a new person.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class AddPersonDTO 
    {
        /// <summary>Database Id.</summary>
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid PersonId { get; set; }
    
        /// <summary>Person's first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirstName { get; set; }
    
        /// <summary>Person's middle name.</summary>
        [Newtonsoft.Json.JsonProperty("mIddleName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MIddleName { get; set; }
    
        /// <summary>Person's last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LastName { get; set; }
    
        /// <summary>Person's gender.</summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Gender { get; set; }
    
        /// <summary>Person's age.</summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Always)]
        public int Age { get; set; }
    
        /// <summary>Person's country.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Country { get; set; }
    
        /// <summary>Person's city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }
    
        /// <summary>Person's state of birth.</summary>
        [Newtonsoft.Json.JsonProperty("stateId", Required = Newtonsoft.Json.Required.Always)]
        public int StateId { get; set; }
    
        /// <summary>Person's date of birth.</summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateOfBirth { get; set; }
    
        /// <summary>Database entry created date.</summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum OperationType
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class Operation 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationType OperationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Op { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class PetDTO 
    {
        [Newtonsoft.Json.JsonProperty("petId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid PetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nickName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NickName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("petTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PetTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid PersonId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class GetPetTypesDTO 
    {
        [Newtonsoft.Json.JsonProperty("petTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PetTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108